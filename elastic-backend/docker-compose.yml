
services:
  es01:  # First Elasticsearch node
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=cv-cluster
      - discovery.seed_hosts=es02  # Tell node 1 to find node 2
      - cluster.initial_master_nodes=es01,es02
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"  # Limit memory usage
      - xpack.security.enabled=false
      - xpack.security.authc.api_key.enabled=false
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
      - http.cors.allow-methods=POST
      - http.cors.allow-headers=Content-Type
    volumes:
      - es_data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200  # Expose Elasticsearch HTTP port
    networks:
      - elastic-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1g

  es02:  # Second Elasticsearch node
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=cv-cluster
      - discovery.seed_hosts=es01
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - xpack.security.enabled=false
      - xpack.security.authc.api_key.enabled=false
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
      - http.cors.allow-methods=POST
      - http.cors.allow-headers=Content-Type
    volumes:
      - es_data02:/usr/share/elasticsearch/data
    networks:
      - elastic-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1g

  indexer:
    build: .
    container_name: indexer
    command: bash -c "python cv-index.py && docker-compose down indexer"
    depends_on:
      - es01
      - es02
    networks:
      - elastic-net   
    restart: "no"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1g


volumes:
  es_data01:
  es_data02:

networks:
  elastic-net:
    driver: bridge